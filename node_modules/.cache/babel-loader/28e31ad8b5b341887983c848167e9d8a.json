{"ast":null,"code":"import _toConsumableArray from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0,\n      message: 'Click an image to begin!',\n      clickedList: []\n    };\n\n    _this.handleClick = function (id) {\n      // const clickedList = this.state.clickedList;\n      // const score = this.state.score;\n      var _this$state = _this.state,\n          clickedList = _this$state.clickedList,\n          score = _this$state.score,\n          message = _this$state.message,\n          friends = _this$state.friends,\n          topScore = _this$state.topScore;\n      var correctGuessMessage = _this.state.message;\n      correctGuessMessage = 'You guessed correctly!';\n      var wrongGuessMessage = _this.state.message;\n      wrongGuessMessage = 'You guessed incorrectly!'; // Can use indexOf()\n      // Returns true or false if included\n\n      var isClicked = clickedList.includes(id);\n\n      if (isClicked) {\n        _this.setState({\n          message: wrongGuessMessage\n        }); // this.startNewGame()\n\n      } else {\n        var newScore = score + 1;\n\n        _this.setState({\n          clickedList: [].concat(_toConsumableArray(clickedList), [id]),\n          score: newScore,\n          message: correctGuessMessage\n        }); // Move this to a Top Score function can be used even if you loose\n\n\n        if (newScore === friends.length) {\n          _this.resetGame(topScore, message); // this.setState({\n          //   clickedList: [...clickedList, id],\n          //   topScore: newScore,\n          //   message: 'You win'\n          // })\n\n        }\n\n        _this.startNewGame();\n      }\n    };\n\n    _this.resetGame = function (highscore) {\n      _this.setState({\n        score: 0,\n        clickedList: [],\n        highscore: highscore\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"shuffleCards\",\n    // 1) When card clicked check if unique id is in selectedCards \n    // - if in array then game over\n    //    - check if current score is greater than topScore\n    //         - if greater save score as current topScore\n    //    - display game over to screen\n    //    - startNewGame()\n    //       - reset score to zero\n    //       - shuffle cards - random array\n    //       - render to page\n    // 2) if not in array\n    //    - Check if wonGame()\n    //    - increase score counter by 1\n    //    - add id to selectedCards\n    //    - shuffle cards - random array\n    //    - render to page\n    // When card is clicked onClick=\"shuffleCards\" \n    value: function shuffleCards() {}\n  }, {\n    key: \"wonGame\",\n    value: function wonGame() {}\n  }, {\n    key: \"startNewGame\",\n    value: function startNewGame() {\n      var message = 'Click an image to begin!';\n      this.setState({\n        clickedList: [],\n        score: 0,\n        message: message\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(MemoryCard, {\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          handleClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js"],"names":["React","Component","NavBar","Header","Main","Footer","MemoryCard","friends","App","state","score","topScore","message","clickedList","handleClick","id","correctGuessMessage","wrongGuessMessage","isClicked","includes","setState","newScore","length","resetGame","startNewGame","highscore","map","friend","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\n\n\nimport './App.css';\n\nclass App extends Component {\n  \n // Setting this.state.friends to the friends json array\n state = {\n    friends,\n    score: 0,\n    topScore: 0,\n    message: 'Click an image to begin!',\n    clickedList: []\n  };\n  \n  // 1) When card clicked check if unique id is in selectedCards \n  // - if in array then game over\n  //    - check if current score is greater than topScore\n  //         - if greater save score as current topScore\n  //    - display game over to screen\n  //    - startNewGame()\n  //       - reset score to zero\n  //       - shuffle cards - random array\n  //       - render to page\n  // 2) if not in array\n  //    - Check if wonGame()\n  //    - increase score counter by 1\n  //    - add id to selectedCards\n  //    - shuffle cards - random array\n  //    - render to page\n\n\n  // When card is clicked onClick=\"shuffleCards\" \n  shuffleCards() {\n\n  }\n\n  wonGame() {\n\n  }\n\n\n  startNewGame() {\n    const message = 'Click an image to begin!'\n    this.setState({\n      clickedList: [],\n      score: 0,\n      message: message\n    })\n  }\n\n  handleClick = (id) => {\n    // const clickedList = this.state.clickedList;\n    // const score = this.state.score;\n    const { clickedList, score, message, friends, topScore } = this.state;\n    let correctGuessMessage = this.state.message;\n    correctGuessMessage = 'You guessed correctly!';\n    let wrongGuessMessage = this.state.message;\n    wrongGuessMessage = 'You guessed incorrectly!';\n    // Can use indexOf()\n    // Returns true or false if included\n    const isClicked = clickedList.includes(id);\n\n    if (isClicked) {\n      this.setState({\n        message: wrongGuessMessage\n      })\n      // this.startNewGame()\n    } else {\n      const newScore = score + 1;\n\n      this.setState({\n        clickedList: [...clickedList, id],\n        score: newScore,\n        message: correctGuessMessage\n      })\n      // Move this to a Top Score function can be used even if you loose\n      if(newScore === friends.length){\n        this.resetGame(topScore, message)\n        // this.setState({\n        //   clickedList: [...clickedList, id],\n        //   topScore: newScore,\n        //   message: 'You win'\n        // })\n      }\n      this.startNewGame()\n    }\n  }\n\n  resetGame = (highscore) => {\n    this.setState({\n      score: 0,\n      clickedList: [],\n      highscore: highscore\n    })\n    \n  }\n  render() {\n    return (\n      <div className=\"App\">\n          <NavBar score={this.state.score} message={this.state.message}/>\n          <Header />\n          <Main>\n            {this.state.friends.map(friend => (\n              <MemoryCard\n                id={friend.id}\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </Main>\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}