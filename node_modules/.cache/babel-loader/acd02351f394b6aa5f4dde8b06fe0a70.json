{"ast":null,"code":"import _toConsumableArray from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0,\n      message: 'Click an image to begin!',\n      clickedList: []\n    };\n\n    _this.handleClick = function (id) {\n      var _this$state = _this.state,\n          clickedList = _this$state.clickedList,\n          score = _this$state.score,\n          friends = _this$state.friends,\n          topScore = _this$state.topScore;\n\n      _this.shuffleCards(friends);\n\n      var correctGuessMessage = _this.state.message;\n      correctGuessMessage = 'You guessed correctly!';\n      var wrongGuessMessage = _this.state.message;\n      wrongGuessMessage = 'You guessed incorrectly!';\n      var isClicked = clickedList.includes(id);\n      var bestScore = Math.max(score, topScore);\n\n      if (isClicked) {\n        _this.resetGame(bestScore);\n\n        _this.setState({\n          message: wrongGuessMessage\n        });\n      } else {\n        var newScore = score + 1;\n\n        _this.setState({\n          clickedList: [].concat(_toConsumableArray(clickedList), [id]),\n          score: newScore,\n          message: correctGuessMessage\n        });\n\n        if (newScore === friends.length) {\n          _this.resetGame(newScore);\n        }\n      }\n    };\n\n    _this.shuffleCards = function (array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      _this.setState({\n        friends: array\n      });\n    };\n\n    _this.resetGame = function (highscore) {\n      var message = 'Click an image to begin!';\n\n      _this.setState({\n        score: 0,\n        clickedList: [],\n        topScore: highscore,\n        message: message\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // Lifecycle method - occurs when main component is refressed \n    value: function componentDidMount() {\n      var friends = this.state.friends;\n      this.shuffleCards(friends);\n    } // Method to process the game when a card is clicked\n\n  }, {\n    key: \"render\",\n    // Method to display the components \n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(MemoryCard, {\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          handleClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // 1) When card clicked check if unique id is in selectedCards \n// - if in array then game over\n//    - check if current score is greater than topScore\n//         - if greater save score as current topScore\n//    - display game over to screen\n//    - startNewGame()\n//       - reset score to zero\n//       - shuffle cards - random array\n//       - render to page\n// 2) if not in array\n//    - Check if wonGame()\n//    - increase score counter by 1\n//    - add id to selectedCards\n//    - shuffle cards - random array\n//    - render to page","map":{"version":3,"sources":["/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js"],"names":["React","Component","NavBar","Header","Main","Footer","MemoryCard","friends","App","state","score","topScore","message","clickedList","handleClick","id","shuffleCards","correctGuessMessage","wrongGuessMessage","isClicked","includes","bestScore","Math","max","resetGame","setState","newScore","length","array","i","j","floor","random","temp","highscore","map","friend","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  \n state = {\n    friends,\n    score: 0,\n    topScore: 0,\n    message: 'Click an image to begin!',\n    clickedList: []\n  };\n  \n  // Lifecycle method - occurs when main component is refressed \n  componentDidMount(){\n    const { friends } = this.state;\n    this.shuffleCards(friends);\n  }\n\n  // Method to process the game when a card is clicked\n  handleClick = (id) => {\n\n    const { clickedList, score, friends, topScore } = this.state;\n    this.shuffleCards(friends);\n\n    let correctGuessMessage = this.state.message;\n    correctGuessMessage = 'You guessed correctly!';\n    let wrongGuessMessage = this.state.message;\n    wrongGuessMessage = 'You guessed incorrectly!';\n    \n    const isClicked = clickedList.includes(id);\n    \n    const bestScore = Math.max(score, topScore)\n    if (isClicked) {\n      \n      this.resetGame(bestScore)\n\n      this.setState({\n        message: wrongGuessMessage\n      })\n    } else {\n      const newScore = score + 1;\n\n      this.setState({\n        clickedList: [...clickedList, id],\n        score: newScore,\n        message: correctGuessMessage\n      })\n    \n      if(newScore === friends.length){\n        this.resetGame(newScore)\n      }\n    }\n  }\n\n  // Method to randomly shuffle the cards \n  shuffleCards = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    this.setState({\n      friends: array\n    })  \n  }\n\n  // Method to restart a new game \n  resetGame = (highscore) => {\n    const message = 'Click an image to begin!'\n    this.setState({\n      score: 0,\n      clickedList: [],\n      topScore: highscore,\n      message: message\n    })\n  }\n\n  // Method to display the components \n  render() {\n    return (\n      <div className=\"App\">\n          <NavBar score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n          <Header />\n          <Main>\n            {this.state.friends.map(friend => (\n              <MemoryCard\n                id={friend.id}\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </Main>\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n // 1) When card clicked check if unique id is in selectedCards \n  // - if in array then game over\n  //    - check if current score is greater than topScore\n  //         - if greater save score as current topScore\n  //    - display game over to screen\n  //    - startNewGame()\n  //       - reset score to zero\n  //       - shuffle cards - random array\n  //       - render to page\n  // 2) if not in array\n  //    - Check if wonGame()\n  //    - increase score counter by 1\n  //    - add id to selectedCards\n  //    - shuffle cards - random array\n  //    - render to page"]},"metadata":{},"sourceType":"module"}