{"ast":null,"code":"import _toConsumableArray from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0,\n      message: 'Click an image to begin!',\n      clickedList: []\n    };\n\n    _this.handleClick = function (id) {\n      // const clickedList = this.state.clickedList;\n      // const score = this.state.score;\n      var _this$state = _this.state,\n          clickedList = _this$state.clickedList,\n          score = _this$state.score,\n          message = _this$state.message,\n          friends = _this$state.friends,\n          topScore = _this$state.topScore;\n\n      _this.shuffleCards(friends); // this.setState({\n      //   friends: this.shuffleCards(friends)\n      // })\n\n\n      var correctGuessMessage = _this.state.message;\n      correctGuessMessage = 'You guessed correctly!';\n      var wrongGuessMessage = _this.state.message;\n      wrongGuessMessage = 'You guessed incorrectly!'; // Can use indexOf()\n      // Returns true or false if included\n\n      var isClicked = clickedList.includes(id);\n\n      if (isClicked) {\n        var bestScore = Math.max(score, topScore);\n\n        _this.resetGame(bestScore);\n\n        _this.setState({\n          message: wrongGuessMessage\n        });\n\n        _this.startNewGame();\n      } else {\n        var newScore = score + 1;\n\n        _this.setState({\n          clickedList: [].concat(_toConsumableArray(clickedList), [id]),\n          score: newScore,\n          message: correctGuessMessage\n        }); // Move this to a Top Score function can be used even if you loose\n\n\n        if (newScore === friends.length) {\n          _this.resetGame(newScore); // this.setState({\n          //   clickedList: [...clickedList, id],\n          //   topScore: newScore,\n          //   message: 'You win'\n          // })\n\n        } // this.startNewGame()\n\n      }\n    };\n\n    _this.shuffleCards = function (array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      _this.setState({\n        friends: array\n      });\n    };\n\n    _this.resetGame = function (highscore) {\n      _this.setState({\n        score: 0,\n        clickedList: [],\n        topScore: highscore\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var friends = this.state.friends;\n      this.shuffleCards(friends);\n    } // 1) When card clicked check if unique id is in selectedCards \n    // - if in array then game over\n    //    - check if current score is greater than topScore\n    //         - if greater save score as current topScore\n    //    - display game over to screen\n    //    - startNewGame()\n    //       - reset score to zero\n    //       - shuffle cards - random array\n    //       - render to page\n    // 2) if not in array\n    //    - Check if wonGame()\n    //    - increase score counter by 1\n    //    - add id to selectedCards\n    //    - shuffle cards - random array\n    //    - render to page\n\n  }, {\n    key: \"wonGame\",\n    value: function wonGame() {}\n  }, {\n    key: \"startNewGame\",\n    value: function startNewGame() {\n      var message = 'Click an image to begin!';\n      this.setState({\n        clickedList: [],\n        score: 0,\n        message: message\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(MemoryCard, {\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          handleClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adriennerice/Bootcamp/clicky-game/clicky-game/src/App.js"],"names":["React","Component","NavBar","Header","Main","Footer","MemoryCard","friends","App","state","score","topScore","message","clickedList","handleClick","id","shuffleCards","correctGuessMessage","wrongGuessMessage","isClicked","includes","bestScore","Math","max","resetGame","setState","startNewGame","newScore","length","array","i","j","floor","random","temp","highscore","map","friend","name","image"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAGA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UAGLC,K,GAAQ;AACLF,MAAAA,OAAO,EAAPA,OADK;AAELG,MAAAA,KAAK,EAAE,CAFF;AAGLC,MAAAA,QAAQ,EAAE,CAHL;AAILC,MAAAA,OAAO,EAAE,0BAJJ;AAKLC,MAAAA,WAAW,EAAE;AALR,K;;UA2CPC,W,GAAc,UAACC,EAAD,EAAQ;AACpB;AACA;AAFoB,wBAIuC,MAAKN,KAJ5C;AAAA,UAIZI,WAJY,eAIZA,WAJY;AAAA,UAICH,KAJD,eAICA,KAJD;AAAA,UAIQE,OAJR,eAIQA,OAJR;AAAA,UAIiBL,OAJjB,eAIiBA,OAJjB;AAAA,UAI0BI,QAJ1B,eAI0BA,QAJ1B;;AAKpB,YAAKK,YAAL,CAAkBT,OAAlB,EALoB,CAMpB;AACA;AACA;;;AAEA,UAAIU,mBAAmB,GAAG,MAAKR,KAAL,CAAWG,OAArC;AACAK,MAAAA,mBAAmB,GAAG,wBAAtB;AACA,UAAIC,iBAAiB,GAAG,MAAKT,KAAL,CAAWG,OAAnC;AACAM,MAAAA,iBAAiB,GAAG,0BAApB,CAboB,CAcpB;AACA;;AACA,UAAMC,SAAS,GAAGN,WAAW,CAACO,QAAZ,CAAqBL,EAArB,CAAlB;;AAEA,UAAII,SAAJ,EAAe;AACb,YAAME,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAT,EAAgBC,QAAhB,CAAlB;;AAEA,cAAKa,SAAL,CAAeH,SAAf;;AAEA,cAAKI,QAAL,CAAc;AACZb,UAAAA,OAAO,EAAEM;AADG,SAAd;;AAGA,cAAKQ,YAAL;AACD,OATD,MASO;AACL,YAAMC,QAAQ,GAAGjB,KAAK,GAAG,CAAzB;;AAEA,cAAKe,QAAL,CAAc;AACZZ,UAAAA,WAAW,+BAAMA,WAAN,IAAmBE,EAAnB,EADC;AAEZL,UAAAA,KAAK,EAAEiB,QAFK;AAGZf,UAAAA,OAAO,EAAEK;AAHG,SAAd,EAHK,CAQL;;;AACA,YAAGU,QAAQ,KAAKpB,OAAO,CAACqB,MAAxB,EAA+B;AAC7B,gBAAKJ,SAAL,CAAeG,QAAf,EAD6B,CAE7B;AACA;AACA;AACA;AACA;;AACD,SAhBI,CAiBL;;AACD;AACF,K;;UAGDX,Y,GAAe,UAACa,KAAD,EAAW;AACxB,WAAK,IAAIC,CAAC,GAAGD,KAAK,CAACD,MAAN,GAAe,CAA5B,EAA+BE,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,YAAIC,CAAC,GAAGT,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACW,MAAL,MAAiBH,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,YAAII,IAAI,GAAGL,KAAK,CAACC,CAAD,CAAhB;AACAD,QAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,QAAAA,KAAK,CAACE,CAAD,CAAL,GAAWG,IAAX;AACH;;AACD,YAAKT,QAAL,CAAc;AACZlB,QAAAA,OAAO,EAAEsB;AADG,OAAd;AAGD,K;;UAEDL,S,GAAY,UAACW,SAAD,EAAe;AACzB,YAAKV,QAAL,CAAc;AACZf,QAAAA,KAAK,EAAE,CADK;AAEZG,QAAAA,WAAW,EAAE,EAFD;AAGZF,QAAAA,QAAQ,EAAEwB;AAHE,OAAd;AAKD,K;;;;;;;wCAtGkB;AAAA,UACT5B,OADS,GACG,KAAKE,KADR,CACTF,OADS;AAEjB,WAAKS,YAAL,CAAkBT,OAAlB;AACD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BAGU,CAET;;;mCAGc;AACb,UAAMK,OAAO,GAAG,0BAAhB;AACA,WAAKa,QAAL,CAAc;AACZZ,QAAAA,WAAW,EAAE,EADD;AAEZH,QAAAA,KAAK,EAAE,CAFK;AAGZE,QAAAA,OAAO,EAAEA;AAHG,OAAd;AAKD;;;6BAyEQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAA1B;AAAiC,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKH,KAAL,CAAWF,OAAX,CAAmB6B,GAAnB,CAAuB,UAAAC,MAAM;AAAA,eAC5B,oBAAC,UAAD;AACE,UAAA,EAAE,EAAEA,MAAM,CAACtB,EADb;AAEE,UAAA,GAAG,EAAEsB,MAAM,CAACtB,EAFd;AAGE,UAAA,IAAI,EAAEsB,MAAM,CAACC,IAHf;AAIE,UAAA,KAAK,EAAED,MAAM,CAACE,KAJhB;AAKE,UAAA,WAAW,EAAE,MAAI,CAACzB,WALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD4B;AAAA,OAA7B,CADH,CAHJ,EAcI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdJ,CADF;AAkBD;;;;EAxIeb,S;;AA2IlB,eAAeO,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport friends from \"./friends.json\";\n\n\nimport './App.css';\n\nclass App extends Component {\n  \n // Setting this.state.friends to the friends json array\n state = {\n    friends,\n    score: 0,\n    topScore: 0,\n    message: 'Click an image to begin!',\n    clickedList: []\n  };\n  \n  componentDidMount(){\n    const { friends } = this.state;\n    this.shuffleCards(friends);\n  }\n  // 1) When card clicked check if unique id is in selectedCards \n  // - if in array then game over\n  //    - check if current score is greater than topScore\n  //         - if greater save score as current topScore\n  //    - display game over to screen\n  //    - startNewGame()\n  //       - reset score to zero\n  //       - shuffle cards - random array\n  //       - render to page\n  // 2) if not in array\n  //    - Check if wonGame()\n  //    - increase score counter by 1\n  //    - add id to selectedCards\n  //    - shuffle cards - random array\n  //    - render to page\n\n\n  wonGame() {\n\n  }\n\n\n  startNewGame() {\n    const message = 'Click an image to begin!'\n    this.setState({\n      clickedList: [],\n      score: 0,\n      message: message\n    })\n  }\n\n  handleClick = (id) => {\n    // const clickedList = this.state.clickedList;\n    // const score = this.state.score;\n\n    const { clickedList, score, message, friends, topScore } = this.state;\n    this.shuffleCards(friends);\n    // this.setState({\n    //   friends: this.shuffleCards(friends)\n    // })\n\n    let correctGuessMessage = this.state.message;\n    correctGuessMessage = 'You guessed correctly!';\n    let wrongGuessMessage = this.state.message;\n    wrongGuessMessage = 'You guessed incorrectly!';\n    // Can use indexOf()\n    // Returns true or false if included\n    const isClicked = clickedList.includes(id);\n\n    if (isClicked) {\n      const bestScore = Math.max(score, topScore)\n      \n      this.resetGame(bestScore)\n\n      this.setState({\n        message: wrongGuessMessage\n      })\n      this.startNewGame()\n    } else {\n      const newScore = score + 1;\n\n      this.setState({\n        clickedList: [...clickedList, id],\n        score: newScore,\n        message: correctGuessMessage\n      })\n      // Move this to a Top Score function can be used even if you loose\n      if(newScore === friends.length){\n        this.resetGame(newScore)\n        // this.setState({\n        //   clickedList: [...clickedList, id],\n        //   topScore: newScore,\n        //   message: 'You win'\n        // })\n      }\n      // this.startNewGame()\n    }\n  }\n\n  // When card is clicked onClick=\"shuffleCards\" \n  shuffleCards = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    this.setState({\n      friends: array\n    })  \n  }\n\n  resetGame = (highscore) => {\n    this.setState({\n      score: 0,\n      clickedList: [],\n      topScore: highscore\n    })\n  }\n\n    \n\n  render() {\n    return (\n      <div className=\"App\">\n          <NavBar score={this.state.score} message={this.state.message}/>\n          <Header />\n          <Main>\n            {this.state.friends.map(friend => (\n              <MemoryCard\n                id={friend.id}\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </Main>\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}